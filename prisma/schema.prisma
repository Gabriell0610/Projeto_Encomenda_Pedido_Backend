// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum status {
  ACEITO
  PENDENTE
  PREPARANDO
  ENTREGUE
  CANCELADO
}

enum statusItem {
  ATIVO
  INATIVO
}

enum meioPagamento {
  PIX
  CARTAO_CREDITO
  CARTAO_DEBITO
}

enum StatusCart {
  ATIVO
  FINALIZADO
}

model Usuario {
  id              String            @id @default(uuid())
  nome            String            @db.VarChar()
  email           String            @unique @db.VarChar()
  senha           String            @db.VarChar()
  telefone        String            @db.VarChar(11)
  dataCriacao     DateTime?         @default(now()) @map("data de criacao") @db.Date
  dataAtualizacao DateTime?         @default(now()) @map("data de atualizacao") @db.Date
  role            String
  enderecos       UsuarioEndereco[]
  pedidos         Pedido[]
  carrinho        Carrinho[]
  tokenResets     tokenResets[]
}

model Endereco {
  id          String  @id @default(uuid())
  cep         String  @db.VarChar()
  rua         String  @db.VarChar()
  bairro      String  @db.VarChar()
  numero      String  @db.VarChar()
  cidade      String  @db.VarChar()
  estado      String  @db.VarChar()
  complemento String? @db.VarChar()

  dataCriacao     DateTime? @default(now()) @map("data de criacao") @db.Date
  dataAtualizacao DateTime? @default(now()) @map("data de atualizacao") @db.Date

  pedidos  Pedido[]
  usuarios UsuarioEndereco[]

  @@map("enderecos")
}

model UsuarioEndereco {
  usuarioId  String
  enderecoId String
  usuario    Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  endereco   Endereco @relation(fields: [enderecoId], references: [id], onDelete: Cascade)

  @@id([usuarioId, enderecoId]) // Chave composta
  @@map("usuario_endereco") // Nome da tabela no banco de dados
}

model Pedido {
  id            String        @id @default(uuid())
  numeroPedido  Int           @unique
  status        status
  precoTotal    Decimal       @db.Decimal(10, 2)
  meioPagamento meioPagamento
  observacao    String?       @db.VarChar()

  dataAgendamento  DateTime? @db.Timestamp()
  horarioDeEntrega String?

  dataCriacao     DateTime? @default(now()) @map("data de criacao") @db.Date
  dataAtualizacao DateTime? @default(now()) @map("data de atualizacao") @db.Date

  usuario    Usuario?  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  endereco   Endereco? @relation(fields: [enderecoId], references: [id], onDelete: Cascade)
  carrinho   Carrinho? @relation(fields: [carrinhoId], references: [id], onDelete: Cascade)
  carrinhoId String?   @unique
  usuarioId  String?
  enderecoId String?

  @@map("pedidos")
}

model PedidoManual {
  id               String        @id @default(uuid())
  nomeCliente      String
  telefoneCliente  String
  enderecoCliente  String
  numeroPedido     Int           @unique
  status           status
  precoTotal       Decimal       @db.Decimal(10, 2)
  meioPagamento    meioPagamento
  observacao       String?       @db.VarChar()
  dataAgendamento  DateTime?     @db.Timestamp()
  horarioDeEntrega String?

  dataCriacao     DateTime? @default(now()) @map("data de criacao") @db.Date
  dataAtualizacao DateTime? @default(now()) @map("data de atualizacao") @db.Date

  pedidoManualItem PedidoManualItem[]
}

model PedidoManualItem {
  id             String       @id @default(uuid())
  quantidade     Int
  Item           Item         @relation(fields: [itemId], references: [id])
  itemId         String
  PedidoManual   PedidoManual @relation(fields: [pedidoManualId], references: [id])
  pedidoManualId String
}

model Carrinho {
  id     String     @id @default(uuid())
  status StatusCart

  dataCriacao DateTime? @default(now()) @map("data de criacao") @db.Date
  valorTotal  Decimal?  @db.Decimal(10, 2)

  usuario   Usuario @relation(fields: [usuarioId], references: [id])
  usuarioId String
  pedido    Pedido?

  carrinhoItens CarrinhoItens[]
}

model Item {
  id              String     @id @default(uuid())
  nome            String     @db.VarChar()
  preco           Decimal    @db.Decimal(10, 2)
  descricao       String     @db.VarChar()
  image           String     @db.VarChar()
  dataCriacao     DateTime?  @default(now()) @map("data de criacao") @db.Date
  dataAtualizacao DateTime?  @default(now()) @map("data de atualizacao") @db.Date
  disponivel      statusItem

  carrinhoItens    CarrinhoItens[]
  PedidoManualItem PedidoManualItem[]

  @@map("itens")
}

model CarrinhoItens {
  id         String   @id @default(uuid())
  quantidade Int
  precoAtual Decimal  @db.Decimal(10, 2)
  Carrinho   Carrinho @relation(fields: [carrinhoId], references: [id], onDelete: Cascade)
  Item       Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  carrinhoId String
  itemId     String
}

model tokenResets {
  id          String    @id @default(uuid())
  token       String    @unique @db.VarChar()
  expiraEm    DateTime  @db.Timestamp()
  status      String
  dataCriacao DateTime? @default(now()) @map("data de criacao") @db.Date
  usuarioId   String
  usuario     Usuario   @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@map("token_resets")
}
